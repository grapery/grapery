name: CI/CD Deploy

on:
  push:
    branches: [main, develop,feature/coze]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: env
    env:
      REGISTRY: crpi-kz6w8hb0pa94yvgy.cn-hangzhou.personal.cr.aliyuncs.com
      IMAGE_NAME: grapery-app
      TAG: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate .env file with secrets
        run: |
          export ALIPAY_APP_ID=${{ vars.ALIPAY_APP_ID }}
          export ALIPAY_NOTIFY_URL=${{ vars.ALIPAY_NOTIFY_URL }}
          export ALIPAY_PRIVATE_KEY=${{ vars.ALIPAY_PRIVATE_KEY }}
          export ALIPAY_PUBLIC_KEY=${{ vars.ALIPAY_PUBLIC_KEY }}
          export ALIPAY_RETURN_URL=${{ vars.ALIPAY_RETURN_URL }}
          export ALIYUN_ACCESS_KEY_ID=${{ vars.ALIYUN_ACCESS_KEY_ID }}
          export ALIYUN_ACCESS_KEY_SECRET=${{ vars.ALIYUN_ACCESS_KEY_SECRET }}
          export ALIYUN_OSS_BUCKET=${{ vars.ALIYUN_OSS_BUCKET }}
          export ALIYUN_OSS_ENDPOINT=${{ vars.ALIYUN_OSS_ENDPOINT }}
          export ALIYUN_REGION=${{ vars.ALIYUN_REGION }}
          export ALIYUN_ROLE_ARN=${{ vars.ALIYUN_ROLE_ARN }}
          export ALIYUN_API_KEY=${{ vars.ALIYUN_API_KEY }}
          export ALIYUN_SECRET_KEY=${{ vars.ALIYUN_SECRET_KEY }}
          export ALIYUN_OSS_BUCKET=${{ vars.ALIYUN_OSS_BUCKET }}

          export COZE_API_KEY=${{ vars.COZE_API_KEY }}
          export COZE_WORKSPACE_ID=${{ vars.COZE_WORKSPACE_ID }}

          export DB_NAME=${{ vars.DB_NAME }}
          export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          export DB_USER=${{ vars.DB_USER }}
          export DB_ADDR=${{ vars.DB_ADDR }}

          export DOCKERHUB_TOKEN=${{ vars.DOCKERHUB_TOKEN }}
          export DOCKERHUB_USERNAME=${{ vars.DOCKERHUB_USERNAME }}
          
          export DOMAIN_NAME=${{ vars.DOMAIN_NAME }}
          export JWT_SECRET=${{ vars.JWT_SECRET }}
         
          export SERVER_HOST=${{ vars.SERVER_HOST }}
          export SERVER_PORT=${{ vars.SERVER_PORT }}
          export SMTP_HOST=${{ vars.SMTP_HOST }}
          export SMTP_PASSWORD=${{ vars.SMTP_PASSWORD }}
          export SMTP_PORT=${{ vars.SMTP_PORT }}
          export SMTP_USERNAME=${{ vars.SMTP_USERNAME }}
          export SSL_EMAIL=${{ vars.SSL_EMAIL }}
          export STRIPE_PUBLISHABLE_KEY=${{ vars.STRIPE_PUBLISHABLE_KEY }}
          export STRIPE_SECRET_KEY=${{ vars.STRIPE_SECRET_KEY }}
          export STRIPE_WEBHOOK_SECRET=${{ vars.STRIPE_WEBHOOK_SECRET }}
          export DEPLOY_ENV=${{ vars.DEPLOY_ENV }}
          export REDIS_PASSWORD=${{ vars.REDIS_PASSWORD }}
          export REDIS_SERVER=${{ vars.REDIS_SERVER }}
          export DASHSCOPE_API_KEY=${{ vars.DASHSCOPE_API_KEY }}
          export DOUBAO_API_KEY=${{ vars.DOUBAO_API_KEY }}

          bash generate_env.sh
          cat .env

      - name: Login to Aliyun ACR
        run: echo ${{ secrets.ACR_PASSWORD }} | docker login $REGISTRY -u ${{ secrets.ACR_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -f dockerfiles/Dockerfile.grapes -t $REGISTRY/$IMAGE_NAME:$TAG .

      - name: Push Docker image
        run: |
          docker tag $REGISTRY/$IMAGE_NAME:$TAG $REGISTRY/grapery-dev/$IMAGE_NAME:latest
          docker push $REGISTRY/grapery-dev/$IMAGE_NAME:latest

      # 构建 grapes-llmchat 服务镜像
      - name: Build llmchat Docker image
        run: |
          docker build -f dockerfiles/Dockerfile.llmchat -t $REGISTRY/grapes-llmchat:${{ github.sha }} .

      # 推送 grapes-llmchat 服务镜像到阿里云 ACR
      - name: Push llmchat Docker image
        run: |
          docker tag $REGISTRY/grapes-llmchat:${{ github.sha }} $REGISTRY/grapery-dev/grapes-llmchat:latest
          docker push $REGISTRY/grapery-dev/grapes-llmchat:latest

      - name: Upload .env to ECS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: 121.40.176.39
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: ".env"
          target: "/home/ubuntu/grapery/"

      - name: Upload docker-compose.yml to ECS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: 121.40.176.39
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/ubuntu/grapery/"

      - name: Upload nginx.conf to ECS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: 121.40.176.39
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: "nginx.conf"
          target: "/home/ubuntu/grapery/"

      - name: Remote Deploy to Aliyun ECS (docker-compose)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: 121.40.176.39
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/grapery
            docker login ${{ env.REGISTRY }} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}
            docker-compose version
            docker-compose pull
            docker-compose down || true
            docker-compose up -d --remove-orphans
            
            # 配置SSL证书（如果域名已配置）
            if [ -n "${{ vars.DOMAIN_NAME }}" ] && [ -n "${{ vars.SSL_EMAIL }}" ]; then
              echo "配置SSL证书..."
              
              # 申请证书（使用单域名证书）
              sudo certbot certonly --standalone \
                -d api.${{ vars.DOMAIN_NAME }} \
                --email ${{ vars.SSL_EMAIL }} \
                --agree-tos \
                --non-interactive || true
              
              # 设置证书权限
              sudo chown -R ubuntu:ubuntu /etc/letsencrypt || true
            fi
